// We use the real `Response` constructor from the actual node-fetch module
const { Response } = require.requireActual('node-fetch');
// And then mock `fetch` going forward using `Response` with mock data
jest.mock('node-fetch', () =>
  jest.fn(() =>
    Promise.resolve(
      new Response('{"data": [], "status": 400, "success": false}'),
    ),
  ),
);

const fetch = require.requireMock('node-fetch');

import { Client } from '../client';
import FormData from 'form-data';
import createForm from '../helpers/createForm';

beforeEach(() => {
  fetch.mockReset();
});

test('Client instantiates with access token', () => {
  const client = new Client({ access_token: 'abc123' });
  expect(client.access_token).toBe('abc123');
  expect(client.client_id).toBeUndefined();
  expect(client.anonymous).toBe(false);
});

test('Client instantiates with client ID', () => {
  const client = new Client({ client_id: 'abc123' });
  expect(client.client_id).toBe('abc123');
  expect(client.access_token).toBeUndefined();
  expect(client.anonymous).toBe(true);
});

test('Client contructor throws without auth credentials', () => {
  expect(() => new Client({})).toThrowErrorMatchingInlineSnapshot(
    `"Client requires an access token or client ID to make requests against the Imgur API"`,
  );
});

test('requests are decorated with an access token', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ access_token: 'abc123' });
  await client.request('https://www.blah.com', {
    method: 'GET',
  });
  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      Authorization: 'Bearer abc123',
    },
    method: 'GET',
  });
});

test('requests are decorated with a client ID', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ client_id: 'abc123' });
  await client.request('https://www.blah.com', {
    method: 'GET',
  });
  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      Authorization: 'Client-ID abc123',
    },
    method: 'GET',
  });
});

test('post() has correct headers and generated form data', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ access_token: 'abc123' });
  const params = {
    image: 'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7',
    type: 'bas64',
  };

  await client.post('https://www.blah.com', params);

  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch.mock.calls[0][0]).toBe('https://www.blah.com');

  // Get the instance of FormData generated by post(). FormData generates
  // forms with some randomized form-data boundaries that is nondeterministic
  const generatedForm = fetch.mock.calls[0][1].body;

  expect(generatedForm).toBeInstanceOf(FormData);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      ...generatedForm.getHeaders(),
      Authorization: 'Bearer abc123',
    },
    body: generatedForm,
    method: 'POST',
  });
});

test('post() has correct headers and passed in form data reference', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ access_token: 'abc123' });
  const params = {
    image: 'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7',
    type: 'base64',
  };

  const form = createForm(params);

  await client.post('https://www.blah.com', form);
  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      ...form.getHeaders(),
      Authorization: 'Bearer abc123',
    },
    body: form,
    method: 'POST',
  });
});

test('get() has correct headers', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ access_token: 'abc123' });
  await client.get('https://www.blah.com');
  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      Authorization: 'Bearer abc123',
    },
    method: 'GET',
  });
});

test('delete() has correct headers', async () => {
  fetch.mockReturnValue(Promise.resolve(new Response('{"success": true}')));
  const client = new Client({ access_token: 'abc123' });
  await client.delete('https://www.blah.com');
  expect(fetch).toHaveBeenCalledTimes(1);
  expect(fetch).toHaveBeenCalledWith('https://www.blah.com', {
    headers: {
      Authorization: 'Bearer abc123',
    },
    method: 'DELETE',
  });
});
